buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7"
}

group = 'eu.ydp'
def projectName = 'ydpgwtutils'

allprojects {
    repositories {
        jcenter()
    }
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'java'
}

dependencies {
    compile group: 'com.google.gwt', name: 'gwt-servlet', version: '2.7.0'
    compile group: 'com.google.gwt', name: 'gwt-user', version: '2.7.0'
    compile group: 'com.google.gwt', name: 'gwt-dev', version: '2.7.0'

    compile group: 'com.google.guava', name: 'guava-gwt', version: '18.0'
    compile group: 'com.google.gwt.inject', name: 'gin', version: '2.1.2'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
    testCompile group: 'org.easytesting', name: 'fest-assert-core', version: '2.0M10'
    testCompile group: 'com.google.gwt.gwtmockito', name: 'gwtmockito', version: '1.1.5'
    testCompile group: 'pl.pragmatists', name: 'JUnitParams', version: '1.0.4'
}

sourceSets {
    test.runtimeClasspath += files(main.java.srcDirs)
    test.runtimeClasspath += files(test.java.srcDirs)
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

task testJUnit(type: Test) {

    useJUnit {
        excludeCategories 'eu.ydp.gwtutil.category.GWTUnitTestCategory'
    }

    include 'eu/ydp/gwtutil/**'

    forkEvery = 1
    maxHeapSize = '512M'
    jvmArgs(['-XX:MaxPermSize=256M', '-Xss1M'])
}

task testGWTUnit(type: Test) {

    useJUnit {
        includeCategories 'eu.ydp.gwtutil.category.GWTUnitTestCategory'
    }

    forkEvery = 1
    maxHeapSize = '512M'
    jvmArgs(['-XX:MaxPermSize=256M', '-Xss1M'])
}

task test(overwrite: true, dependsOn: [testJUnit, testGWTUnit]) {
    ext {
        // this is needed for sonarRunner
        reports = [junitXml: [destination: file("$buildDir/test-results")]]
    }
}

jar {
    baseName projectName
    from sourceSets.main.java.srcDirs
    from sourceSets.main.output
    duplicatesStrategy 'exclude'
}

task dist(dependsOn: ['test', 'jar'])

clean {
    delete libsDir
    delete 'gwt-unitCache'
}

publishing {
    publications {
        BintrayPublication(MavenPublication) {
            from components.java
            groupId group
            artifactId projectName
            version version
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['BintrayPublication']
    pkg {
        repo = 'empiria'
        name = projectName
        userOrg = 'youngdigitalplanet'
        licenses = ['EPL-1.0']
        vcsUrl = 'https://github.com/YoungDigitalPlanet/ydpUtils.gwt.git'
        publicDownloadNumbers = true
    }
}