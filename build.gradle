apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'sonar-runner'
apply plugin: 'eclipse'
apply plugin: 'idea'

def buildProfile = project.getProperties().get('buildProfile', 'develop')
apply from: "gradle/profiles/${buildProfile}.gradle"
apply plugin: 'ivy-publish'

def projectName = 'ydpgwtutils'
sourceCompatibility = 1.7
compileJava.options.encoding = 'UTF-8'
libsDirName = '../dist'

ext {
    tstamp = new Date().format("yyyyMMddHHmmssSSS")
    buildnumber = "${System.env["BUILD_NUMBER"] ?: "${tstamp}"}"
    jacocoReport = "$buildDir/jacoco/testJUnit.exec"
}

repositories {
    mavenCentral()
    ivy {
        url 'http://dev/ivyrep/public/'
        layout 'pattern', {
            artifact '[organisation]/[module]/[revision]/[type]s/[artifact].[ext]'
            ivy '[organisation]/[module]/[revision]/[type]s/[artifact].[ext]'
        }
    }

    ivy {
        url 'http://dev/ivyrep/shared/'
        layout 'pattern', {
            artifact '[organisation]/[module]/[revision]/[type]s/[artifact].[ext]'
            ivy '[organisation]/[module]/[revision]/[type]s/[artifact].[ext]'
        }
    }
}

dependencies {
    compile group: 'com.google.gwt', name: 'gwt-servlet', version: '2.6.1'
    compile group: 'com.google.gwt', name: 'gwt-user', version: '2.6.1'
    compile group: 'com.google.gwt', name: 'gwt-dev', version: '2.6.1'

    compile group: 'com.google.guava', name: 'guava-gwt', version: '17.0'
    compile group: 'com.google.gwt.inject', name: 'gin', version: '2.1.2'

    compile group: 'junit', name: 'junit', version: '4.11'
    compile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    compile group: 'org.mockito', name: 'mockito-core', version: '1.9.5'
    compile group: 'org.easytesting', name: 'fest-assert-core', version: '2.0M10'
    compile group: 'com.google.gwt.gwtmockito', name: 'gwtmockito', version: '1.1.3'
    compile group: 'pl.pragmatists', name: 'JUnitParams', version: '1.0.1'
}

sonarRunner {
    sonarProperties {
        property 'sonar.host.url', sonar_host_url
        property 'sonar.jdbc.url', sonar_jdbc_url
        property 'sonar.jdbc.driverClassName', sonar_jdbc_driverClassName
        property 'sonar.jdbc.username', sonar_jdbc_username
        property 'sonar.jdbc.password', sonar_jdbc_password
        property 'sonar.projectName', sonar_project_name

        property 'sonar.core.codeCoveragePlugin', 'jacoco'
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/'

        }
        resources {
            srcDir 'src/'
        }
    }
    test {
        java {
            srcDir 'test/'
        }
        resources {
            srcDir 'test/'
        }
    }

    sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs)
    sourceSets.test.runtimeClasspath += files(sourceSets.test.java.srcDirs)
}

jacoco {
    toolVersion = '0.7.1.201405082137'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

task testJUnit(type: Test) {
    jacoco {
        enabled = true
    }

    useJUnit {
        excludeCategories 'eu.ydp.gwtutil.category.GWTUnitTest'
    }

    include 'eu/ydp/gwtutil/**'

    forkEvery = 1
    maxHeapSize = '512M'
    jvmArgs(['-XX:MaxPermSize=256M', '-Xss1M'])
}

task testGWTUnit(type: Test) {
    jacoco {
        enabled = false
    }

    useJUnit {
        includeCategories 'eu.ydp.gwtutil.category.GWTUnitTest'
    }

    forkEvery = 1
    maxHeapSize = '512M'
    jvmArgs(['-XX:MaxPermSize=256M', '-Xss1M'])
}

task test(overwrite: true, dependsOn: [testJUnit, testGWTUnit]) {
    ext {
        // this is needed for sonarRunner
        reports = [junitXml: [destination: file("$buildDir/test-results")]]
        jacoco = [destinationFile: file(jacocoReport)]
    }
}

task dist(type: Jar, dependsOn: 'test') {
    baseName projectName
    from sourceSets.main.java.srcDirs
    from sourceSets.main.output
    duplicatesStrategy 'exclude'
}

clean {
    delete libsDir
    delete 'gwt-unitCache'
}

publishing {
    publications {
        ivy(IvyPublication) {
            organisation 'eu.ydp'
            module projectName
            revision "${project.ext.version}-$buildnumber"
            descriptor.status = project.ext.status

            artifacts {
                artifact("${libsDir}/${projectName}.jar") {
                    name projectName
                    classifier 'source'
                    extension 'jar'
                    conf 'default'
                    builtBy dist
                }
            }
        }
    }
    repositories {
        ivy {
            url 'http://dev/ivyrep/public'
            layout 'pattern', {
                artifact '[organisation]/[module]/[revision]/[type]s/[artifact].[ext]'
                ivy '[organisation]/[module]/[revision]/[type]s/[artifact].[ext]'
            }
        }
    }
}